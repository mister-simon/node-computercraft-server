os.loadAPI("./api/lib/helpers")
os.loadAPI("./api/movement/go")


-- Coordinates and Direction is relative to the turtle's start position
local directions = {1 = "North",  2 = "East", 3 = "South", 4 = "West"}
local directionsLength = #directions

local startCoords = vector.new(0, 0, 0)
local currentCoords = vector.new(0, 0, 0)
local startDirection = 1
local currentDirection = 1
local currentPathIndex = 1
local path = {vector = vector.new(0, 0, 0), direction = 1}



-- Private functions 
-- Params: Vector, String, Int
local function updateVector(vector, axis, amount) 
	currentCoords[axis] = currentCoords[axis] + amount
end


-- Params: String (x, y, z)
local function updatePathVector(axis, amount, forceNew)
	local point = path[currentPathIndex]
	local currentVector = point.vector
	amount = helpers.ifNil(amount, 1)

	if (currentDireciton == point.direction) or (currentAxis == axis and forceNew ~= true) then
		updateVector(point.vector, axis, amount)
	else
		currentAxis = axis
		updateVector(createNewPoint().vector, axis, amount);
	end
end

-- Params: Vector, Int
local function createNewPoint(newVector, newDirection)
	local lastVector = path[currentPathIndex].vector
	newDirection = helpers.ifNil(newDirection, currentDirection)
	newVector = helpers.ifNil(newVector, vector.new(lastVector.x, lastVector.y, lastVector.z))

	currentPathIndex = currentPathIndex + 1
	path[currentPathIndex] = {vector = newVector, direction = currentDirection}

	return path[currentPathIndex]
end	

-- Params: Int
local function updateStoredDirection(turnAmount)
	local newDirection = (currentDirection + turnAmount) % directionsLength

	if newDirection == 0 then
		newDirection = directionsLength
	end
	
	currentDirection = newDirection
	return newDirection
end

-- Params: Int, Int (1, -1)
local function moveOnVerticalAxis(distance, verticalDirection)
	local distanceCovered = repeatMovement(distance, upAction)
	updatePath("y", distanceCovered)
	updateY(distanceCovered * verticalDirection)
end


-- > On Move Callbacks
local function updateHorizontalAxis()
	updatePathVector(currentAxis, 1)
end

local function updateVerticalAxis()
	currentAxis = 'y'
	updatePathVector(currentAxis, 1)
end

local function updateVerticalAxisNegative()
	updatePathVector(currentAxis, -1)
end



-- Exposed API / Functions
-- > Movement
-- Params: Int
function forward(distance)
	go.forward(distance, updateHorizontalAxis)
end

-- Params: Int
function up(distance)
	go.up(distance, updateVerticalAxis)
end

-- Params: Int
function down(distance)
	go.up(distance, updateVerticalAxisNegative)
end

-- Params: Int, Bool
function turnLeft(turnIterations, dumbTurn)
	go.turnLeft(turnIterations, dumbTurn)
	updateStoredDirection(turnIterations)
end

-- Params: Int, Bool
function turnRight(turnIterations, dumbTurn)
	go.turnRight(turnIterations, dumbTurn)
	updateStoredDirection(turnIterations)
end

-- > Getters
-- Params: Int
function getPathPoint(index)
	index = helpers.ifNil(index, currentPathIndex)
	return path[currentPathIndex]
end

function getPath()
	return path
end

function getStartPosition()
	return startCoords
end

function getCurrentPosition()
	return currentCoords
end

function getDirection()
	return currentDirection
end